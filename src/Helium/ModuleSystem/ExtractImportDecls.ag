ATTR Module [ | | coreImportDecls : { [ImportList] } ] 

INCLUDE "UHA_Syntax.ag"
INCLUDE "ToCoreName.ag"

imports{
import Helium.Syntax.UHA_Syntax
import Helium.Syntax.UHA_Utils
import Helium.Lvm.Common.Id
import Helium.Lvm.Common.IdSet
import qualified Helium.Lvm.Core.Expr as Core
import qualified Helium.Lvm.Core.Type as Core
import qualified Helium.Lvm.Core.Module as Core
import Helium.Utils.Utils (internalError)
import Data.Maybe(fromMaybe)
}
{
type ImportList = ( Maybe Bool    -- Nothing if there is no import specification. Then True if hiding, false if not.
                  , Bool          -- True if qualified
                  , Name          -- How the imports should be qualified (normally the module name)
                  , IdSet         -- Values
                  , IdSet         -- Constructors, records fields or class methods
                  , IdSet         -- Complete types or classes
                  , IdSet         -- Only the type constructor or class name
                  , Name          -- The imported module name
                  )
}

  
ATTR Body ImportDeclarations ImportDeclaration
   [ | | coreImportDecls USE { ++ } { [] } : { [ImportList] } ] 
    
SEM ImportDeclaration
    | Import 
        lhs.coreImportDecls = [( @importspecification.importspec
                               , @qualified
                               , fromMaybe @name.self @asname.name
                               , @importspecification.values
                               , @importspecification.confieldormethods
                               , @importspecification.typeorclassesCompl
                               , @importspecification.typeorclasses
                               , @name.self)]

ATTR MaybeImportSpecification ImportSpecification [ | | importspec : {Maybe Bool} ]

SEM MaybeImportSpecification
    | Nothing              lhs.importspec     = Nothing

SEM ImportSpecification
    | Import lhs.importspec = Just @hiding

ATTR MaybeImportSpecification ImportSpecification Imports Import 
    [ | | values, typeorclasses, confieldormethods, typeorclassesCompl USE { `unionSet` } { emptySet } : IdSet ]

SEM Import
    | Variable                lhs.values             = singleSet (idFromName @name.self)
    | TypeOrClass             lhs.typeorclasses      = singleSet (idFromName @name.self)
                              lhs.confieldormethods  = setFromList $ maybe [] (map idFromName) @names.names
    | TypeOrClassComplete     lhs.typeorclassesCompl = singleSet (idFromName @name.self)
